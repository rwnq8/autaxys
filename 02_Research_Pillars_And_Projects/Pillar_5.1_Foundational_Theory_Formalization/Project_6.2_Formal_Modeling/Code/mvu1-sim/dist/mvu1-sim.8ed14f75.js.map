{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-c22072d8324109f1.js","main.ts","mvu1.ts","node_modules/graphology/dist/graphology.umd.min.js","node_modules/graphology/src/utils.js","node_modules/events/events.js","node_modules/obliterator/iterator.js","node_modules/obliterator/support.js","node_modules/obliterator/iter.js","node_modules/obliterator/take.js","node_modules/graphology/src/errors.js","node_modules/graphology/src/data.js","node_modules/graphology/src/attributes/nodes.js","node_modules/graphology/src/attributes/edges.js","node_modules/obliterator/chain.js","node_modules/graphology/src/iteration/edges.js","node_modules/graphology/src/iteration/neighbors.js","node_modules/graphology/src/iteration/adjacency.js","node_modules/graphology/src/serialization.js","node_modules/graphology/src/graph.js","node_modules/graphology/src/classes.js","node_modules/graphology-utils/index.js","node_modules/graphology-utils/infer-multi.js","node_modules/graphology-utils/is-graph.js","node_modules/graphology-utils/infer-type.js","node_modules/graphology-utils/is-graph-constructor.js","node_modules/graphology-utils/merge-clique.js","node_modules/graphology-utils/merge-cycle.js","node_modules/graphology-utils/merge-path.js","node_modules/graphology-utils/merge-star.js","node_modules/graphology-utils/rename-graph-keys.js","node_modules/graphology-utils/add-edge.js","node_modules/graphology-utils/update-graph-keys.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/papaparse/papaparse.min.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SERVER_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"439701173a9199ea\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"26b064e28ed14f75\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_SERVER_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */,\n  disposedAssets /*: {|[string]: boolean|} */,\n  assetsToDispose /*: Array<[ParcelRequire, string]> */,\n  assetsToAccept /*: Array<[ParcelRequire, string]> */,\n  bundleNotFound = false;\nfunction getHostname() {\n  return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);\n}\n\n// eslint-disable-next-line no-redeclare\nlet WebSocket = globalThis.WebSocket;\nif (!WebSocket && typeof module.bundle.root === 'function') {\n  try {\n    // eslint-disable-next-line no-global-assign\n    WebSocket = module.bundle.root('ws');\n  } catch {\n    // ignore.\n  }\n}\nvar hostname = getHostname();\nvar port = getPort();\nvar protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif (!parent || !parent.isParcelRequire) {\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      // If we're running in the dev server's node runner, listen for messages on the parent port.\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.on('message', async message => {\n          try {\n            await handleMessage(message);\n            parentPort.postMessage('updated');\n          } catch {\n            parentPort.postMessage('restart');\n          }\n        });\n\n        // After the bundle has finished running, notify the dev server that the HMR update is complete.\n        queueMicrotask(() => parentPort.postMessage('ready'));\n      }\n    } catch {\n      if (typeof WebSocket !== 'undefined') {\n        try {\n          ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n        } catch (err) {\n          // Ignore cloudflare workers error.\n          if (err.message && !err.message.includes('Disallowed operation called within global scope')) {\n            console.error(err.message);\n          }\n        }\n      }\n    }\n  }\n  if (ws) {\n    // $FlowFixMe\n    ws.onmessage = async function (event /*: {data: string, ...} */) {\n      var data /*: HMRMessage */ = JSON.parse(event.data);\n      await handleMessage(data);\n    };\n    if (ws instanceof WebSocket) {\n      ws.onerror = function (e) {\n        if (e.message) {\n          console.error(e.message);\n        }\n      };\n      ws.onclose = function () {\n        console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n      };\n    }\n  }\n}\nasync function handleMessage(data /*: HMRMessage */) {\n  checkedAssets = {} /*: {|[string]: boolean|} */;\n  disposedAssets = {} /*: {|[string]: boolean|} */;\n  assetsToAccept = [];\n  assetsToDispose = [];\n  bundleNotFound = false;\n  if (data.type === 'reload') {\n    fullReload();\n  } else if (data.type === 'update') {\n    // Remove error overlay if there is one\n    if (typeof document !== 'undefined') {\n      removeErrorOverlay();\n    }\n    let assets = data.assets;\n\n    // Handle HMR Update\n    let handled = assets.every(asset => {\n      return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n    });\n\n    // Dispatch a custom event in case a bundle was not found. This might mean\n    // an asset on the server changed and we should reload the page. This event\n    // gives the client an opportunity to refresh without losing state\n    // (e.g. via React Server Components). If e.preventDefault() is not called,\n    // we will trigger a full page reload.\n    if (handled && bundleNotFound && assets.some(a => a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n      handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {\n        cancelable: true\n      }));\n    }\n    if (handled) {\n      console.clear();\n\n      // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n      if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n      }\n      await hmrApplyUpdates(assets);\n      hmrDisposeQueue();\n\n      // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n      let processedAssets = {};\n      for (let i = 0; i < assetsToAccept.length; i++) {\n        let id = assetsToAccept[i][1];\n        if (!processedAssets[id]) {\n          hmrAccept(assetsToAccept[i][0], id);\n          processedAssets[id] = true;\n        }\n      }\n    } else fullReload();\n  }\n  if (data.type === 'error') {\n    // Log parcel errors to console\n    for (let ansiDiagnostic of data.diagnostics.ansi) {\n      let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n    }\n    if (typeof document !== 'undefined') {\n      // Render the fancy html overlay\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html);\n      // $FlowFixMe\n      document.body.appendChild(overlay);\n    }\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if (typeof location !== 'undefined' && 'reload' in location) {\n    location.reload();\n  } else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  } else {\n    try {\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.postMessage('restart');\n      }\n    } catch (err) {\n      console.error('[parcel] ⚠️ An HMR update was not accepted. Please restart the process.');\n    }\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout || typeof document === 'undefined') {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  checkedAssets = {};\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else if (a !== null) {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      bundleNotFound = true;\n      return true;\n    }\n    return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return null;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  if (!cached) {\n    return true;\n  }\n  assetsToDispose.push([bundle, id]);\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n  return false;\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}","/**\n * @file This is the main entry point for the MVU-1 web application.\n * It handles user interactions, manages the simulation lifecycle (start, stop),\n * and orchestrates the non-blocking, step-by-step execution of the simulator\n * to provide a responsive user experience with live feedback.\n */\n\nimport { MVU1_Simulator, SimConfig, LogEntry } from './mvu1';\nimport Papa from 'papaparse';\n// Note: Chart.js and Sigma.js imports would be added back here if chart rendering is re-enabled.\n\n// --- GLOBAL STATE ---\nlet isSimulationRunning = false;\nlet simulatorInstance: MVU1_Simulator | null = null;\n\n// --- UI ELEMENT REFERENCES ---\nconst runButton = document.getElementById('run-button') as HTMLButtonElement;\nconst stopButton = document.getElementById('stop-button') as HTMLButtonElement;\nconst distinctionsInput = document.getElementById('distinctions-input') as HTMLInputElement;\nconst stepsInput = document.getElementById('steps-input') as HTMLInputElement;\nconst liveLogPanel = document.getElementById('live-log-panel') as HTMLElement;\nconst liveLogOutput = document.getElementById('live-log-output') as HTMLElement;\nconst statusLine = document.getElementById('status-line') as HTMLElement;\nconst summaryPanel = document.getElementById('summary-panel') as HTMLElement;\nconst summaryText = document.getElementById('summary-text') as HTMLElement;\nconst downloadPanel = document.getElementById('download-panel') as HTMLElement;\nconst downloadButton = document.getElementById('download-csv') as HTMLButtonElement;\n\n/**\n * Manages the enabled/disabled state of UI controls based on the simulation status.\n * @param running - Whether the simulation is currently running.\n * @param message - An optional status message to display to the user.\n */\nfunction setUIState(running: boolean, message: string = \"\") {\n    isSimulationRunning = running;\n    runButton.disabled = running;\n    stopButton.disabled = !running;\n    distinctionsInput.disabled = running;\n    stepsInput.disabled = running;\n    statusLine.textContent = message;\n\n    if (running) {\n        // Reset UI for a new run\n        summaryPanel.style.display = 'none';\n        downloadPanel.style.display = 'none';\n        liveLogOutput.innerHTML = '';\n        liveLogPanel.style.display = 'block';\n    }\n}\n\n/**\n * Appends a new line to the live log on the UI.\n * @param message - The text to log.\n * @param isError - If true, the log entry will be styled as an error.\n */\nfunction updateLiveLog(message: string, isError: boolean = false) {\n    const timestamp = new Date().toLocaleTimeString();\n    const logLine = document.createElement('div');\n    logLine.textContent = `[${timestamp}] ${message}`;\n    if (isError) {\n        logLine.classList.add('log-error');\n    }\n    liveLogOutput.appendChild(logLine);\n    liveLogOutput.scrollTop = liveLogOutput.scrollHeight;\n}\n\n/**\n * Renders the final summary and download link after a simulation completes.\n */\nfunction renderFinalResults(simulator: MVU1_Simulator) {\n    const finalState = simulator.log[simulator.log.length - 1];\n    if (!finalState) return;\n\n    // Show Summary Panel\n    summaryText.textContent = `Simulation Steps: ${finalState.step}\\nFinal L_A:        ${finalState.L_A.toFixed(4)}\\nDistinctions:     ${finalState.num_distinctions}\\nRelations:        ${finalState.num_relations}\\nBonded Pairs:     ${finalState.num_bonded_pairs}`;\n    summaryPanel.style.display = 'block';\n\n    // Enable Download Button\n    const csvData = Papa.unparse(simulator.log);\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    downloadButton.onclick = () => {\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `mvu1_run_d${simulator.config.initial_distinctions}_s${simulator.config.max_steps}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    };\n    downloadPanel.style.display = 'block';\n    \n    // NOTE: Chart.js and Sigma.js rendering functions would be called here.\n}\n\n\n/**\n * The core non-blocking simulation loop.\n * It executes one step, updates the UI, and then uses requestAnimationFrame\n * to schedule the next step, yielding control to the browser in between.\n * This ensures the UI remains responsive and updates are rendered instantly.\n */\nfunction simulationLoop() {\n    if (!isSimulationRunning || !simulatorInstance) {\n        setUIState(false, \"Simulation stopped.\");\n        return;\n    }\n\n    try {\n        const keepGoing = simulatorInstance.step();\n        const lastLog = simulatorInstance.log[simulatorInstance.log.length - 1];\n        const logMessage = `Step ${lastLog.step.toString().padStart(4, ' ')} | L_A: ${lastLog.L_A.toFixed(3)} | D: ${lastLog.num_distinctions.toString().padStart(3, ' ')} | R: ${lastLog.num_relations.toString().padStart(4, ' ')} | Rule: ${lastLog.rule_applied}`;\n        updateLiveLog(logMessage);\n\n        if (keepGoing && simulatorInstance.step_counter < simulatorInstance.config.max_steps) {\n            // Schedule the next iteration of the loop.\n            requestAnimationFrame(simulationLoop);\n        } else {\n            // Simulation has ended, either by halting or reaching max steps.\n            const reason = !keepGoing ? \"Halted: No more possible moves.\" : \"Finished: Max steps reached.\";\n            setUIState(false, `Simulation complete. ${reason}`);\n            renderFinalResults(simulatorInstance);\n        }\n    } catch (error) {\n        console.error(\"A critical error occurred during simulation step:\", error);\n        updateLiveLog(`FATAL ERROR at Step ${simulatorInstance.step_counter + 1}: ${error.message}`, true);\n        updateLiveLog(\"Check browser console (F12) for more details.\", true);\n        setUIState(false, \"Simulation FAILED due to a critical error.\");\n    }\n}\n\n// --- Event Listener for the Start Button ---\nrunButton.addEventListener('click', () => {\n    // 1. Get configuration from the UI input boxes.\n    const config: SimConfig = {\n        initial_distinctions: parseInt(distinctionsInput.value, 10) || 2,\n        max_steps: parseInt(stepsInput.value, 10) || 10,\n    };\n    \n    // 2. Create a new simulator instance and set the UI to its \"running\" state.\n    simulatorInstance = new MVU1_Simulator(config);\n    setUIState(true, \"Initializing simulation...\");\n    \n    // 3. Initialize the graph and log the initial state.\n    simulatorInstance.initializeGraph();\n    const initialLog = `Initial State | D: ${simulatorInstance.graph.order} | R: ${simulatorInstance.graph.size}`;\n    updateLiveLog(initialLog);\n    \n    // 4. Kick off the non-blocking simulation loop.\n    requestAnimationFrame(simulationLoop);\n});\n\n// --- Event Listener for the Stop Button ---\nstopButton.addEventListener('click', () => {\n    // Setting this flag to false will cause the simulationLoop to exit on its next check.\n    isSimulationRunning = false;\n});\n","import Graph from 'graphology';\nimport { combinations } from 'graphology-utils';\n\n// --- Type Definitions ---\nexport interface SimConfig {\n    initial_distinctions: number;\n    max_steps: number;\n}\n\nexport interface LogEntry {\n    step: number;\n    L_A: number;\n    num_distinctions: number;\n    num_relations: number;\n    graph_size: number;\n    num_bonded_pairs: number;\n    rule_applied: string;\n}\n\ntype Move = { rule: string; nodes: string[]; la: number; priority: number };\n\n/**\n * Encapsulates the entire logic for the MVU-1 simulation.\n * This class manages the universe's state (as a graph), applies the \"Cosmic Algorithm\"\n * rewrite rules, and makes decisions based on the Autaxic Lagrangian to test the\n * core hypothesis of self-organization.\n * This is an implementation of the model described in Project 6.2.\n */\nexport class MVU1_Simulator {\n    public config: SimConfig;\n    public graph: Graph;\n    public log: LogEntry[] = [];\n    public step_counter = 0;\n    // The tie-breaking priority for rules when multiple moves yield the same max L_A.\n    private rule_priority: { [key: string]: number } = { 'bonding': 3, 'collapse': 2, 'annihilation': 1 };\n\n    constructor(config: SimConfig) {\n        this.config = config;\n        this.graph = new Graph();\n    }\n\n    /**\n     * Creates the initial \"primordial soup\" of disconnected Distinctions.\n     * Sets up the G_0 state of the universe.\n     */\n    public initializeGraph(): void {\n        const n_initial = this.config.initial_distinctions;\n        for (let i = 0; i < n_initial; i++) {\n            this.graph.addNode(`p_${i}`, { polarity: 1, x: Math.random(), y: Math.random(), size: 5 });\n            this.graph.addNode(`n_${i}`, { polarity: -1, x: Math.random(), y: Math.random(), size: 5 });\n        }\n        this.logState(0, 'initial_state');\n    }\n\n    /** Helper function to count stable +1/-1 pairs, the numerator for the Lagrangian. */\n    private countBondedPairs(g: Graph): number {\n        let count = 0;\n        g.forEachEdge((_edge, _attrs, source, target) => {\n            if (g.getNodeAttribute(source, 'polarity') !== g.getNodeAttribute(target, 'polarity')) {\n                count++;\n            }\n        });\n        return count;\n    }\n\n    /**\n     * Calculates the Autaxic Lagrangian (L_A) for a given graph state.\n     * This is the \"fitness\" or \"coherence\" score for the universe.\n     *\n     * L_A(G) = (Number of bonded +1/-1 pairs) / (|Distinctions| + |Relations|)\n     */\n    private calculateLA(g: Graph): number {\n        const denominator = g.order + g.size;\n        return denominator === 0 ? 0 : this.countBondedPairs(g) / denominator;\n    }\n    \n    /**\n     * Scans the graph to find every possible application of the Cosmic Algorithm rules.\n     * @returns A list of all potential moves the engine could make in the current state.\n     */\n    private findPossibleMoves(): Move[] {\n        const moves: Move[] = [];\n        const positiveNodes: string[] = [];\n        const negativeNodes: string[] = [];\n        this.graph.forEachNode((node, attrs) => {\n            if (attrs.polarity === 1) positiveNodes.push(node);\n            else negativeNodes.push(node);\n        });\n\n        // --- Rule r1: Annihilation ---\n        // A bonded +1/-1 pair is removed if they are only connected to each other.\n        this.graph.forEachEdge((_edge, _attrs, source, target) => {\n            if (this.graph.getNodeAttribute(source, 'polarity') !== this.graph.getNodeAttribute(target, 'polarity') && this.graph.degree(source) === 1 && this.graph.degree(target) === 1) {\n                moves.push({ rule: 'annihilation', nodes: [source, target], la: 0, priority: this.rule_priority.annihilation });\n            }\n        });\n\n        // --- Rule r2: Bonding ---\n        // A new Relation is created between any disconnected +1 and -1 Distinction.\n        for (const p_node of positiveNodes) {\n            for (const n_node of negativeNodes) {\n                if (!this.graph.hasEdge(p_node, n_node)) {\n                    moves.push({ rule: 'bonding', nodes: [p_node, n_node], la: 0, priority: this.rule_priority.bonding });\n                }\n            }\n        }\n        \n        // --- Rule r3: Redundancy Collapse ---\n        // A fully connected triangle (K3 subgraph) simplifies to a single bonded pair (K2).\n        const foundTriangles = new Set<string>();\n        this.graph.forEachNode(node => {\n            const neighbors = this.graph.neighbors(node);\n            if (neighbors.length < 2) return;\n            combinations(neighbors, 2).forEach(([neighbor1, neighbor2]) => {\n                if (this.graph.hasEdge(neighbor1, neighbor2)) {\n                    const triangle = [node, neighbor1, neighbor2].sort();\n                    const triangleKey = triangle.join(',');\n                    if (foundTriangles.has(triangleKey)) return;\n                    \n                    foundTriangles.add(triangleKey);\n                    // The two nodes with the lowest degree in the whole graph are preserved.\n                    triangle.sort((a, b) => this.graph.degree(a) - this.graph.degree(b));\n                    moves.push({ rule: 'collapse', nodes: triangle, la: 0, priority: this.rule_priority.collapse });\n                }\n            });\n        });\n        return moves;\n    }\n\n    /**\n     * Executes a single step of the simulation. This is the core of the engine's \"thinking\" process.\n     * It finds all possible moves, evaluates which one is \"best\" by maximizing the future L_A,\n     * applies that move, and updates the state.\n     * @returns {boolean} - `false` if the simulation has halted (no moves possible), `true` otherwise.\n     */\n    public step(): boolean {\n        // 1. Find all possible actions (rule applications).\n        const possibleMoves = this.findPossibleMoves();\n        if (possibleMoves.length === 0) return false; // Halt condition\n\n        // 2. For each possible move, create a temporary \"future\" universe and calculate its L_A score.\n        const evaluatedMoves: Move[] = [];\n        for (const move of possibleMoves) {\n            const tempGraph = this.graph.copy();\n            // Apply the move to the temporary graph\n            if (move.rule === 'annihilation') {\n                tempGraph.dropNode(move.nodes[0]);\n                tempGraph.dropNode(move.nodes[1]);\n            } else if (move.rule === 'bonding') {\n                tempGraph.addEdge(move.nodes[0], move.nodes[1]);\n            } else if (move.rule === 'collapse') {\n                tempGraph.dropNode(move.nodes[2]);\n                if (!tempGraph.hasEdge(move.nodes[0], move.nodes[1])) tempGraph.addEdge(move.nodes[0], move.nodes[1]);\n            }\n            // Store the move along with its resulting L_A score.\n            evaluatedMoves.push({ ...move, la: this.calculateLA(tempGraph) });\n        }\n        \n        // 3. Select the best move: one that results in the highest L_A.\n        // The sort function also handles the tie-breaking rule.\n        evaluatedMoves.sort((a, b) => a.la !== b.la ? b.la - a.la : b.priority - a.priority);\n\n        // 4. If there's still a tie (same L_A and same priority), pick one randomly.\n        const bestLa = evaluatedMoves[0].la;\n        const bestPriority = evaluatedMoves[0].priority;\n        const topTierMoves = evaluatedMoves.filter(m => m.la === bestLa && m.priority === bestPriority);\n        const bestMove = topTierMoves[Math.floor(Math.random() * topTierMoves.length)];\n\n        // 5. Apply the chosen \"best\" move to the actual universe graph.\n        if (bestMove.rule === 'annihilation') {\n            this.graph.dropNode(bestMove.nodes[0]);\n            this.graph.dropNode(bestMove.nodes[1]);\n        } else if (bestMove.rule === 'bonding') {\n            this.graph.addEdge(bestMove.nodes[0], bestMove.nodes[1]);\n        } else if (bestMove.rule === 'collapse') {\n             this.graph.dropNode(bestMove.nodes[2]);\n             if (!this.graph.hasEdge(bestMove.nodes[0], bestMove.nodes[1])) this.graph.addEdge(bestMove.nodes[0], bestMove.nodes[1]);\n        }\n        \n        // 6. Log the new state of the universe *after* the move.\n        this.step_counter++;\n        this.logState(this.step_counter, bestMove.rule);\n        return true;\n    }\n\n    /** Records the key metrics of the current graph state for logging and analysis. */\n    private logState(stepNum: number, ruleApplied: string): void {\n        const logEntry: LogEntry = {\n            step: stepNum,\n            L_A: this.calculateLA(this.graph),\n            num_distinctions: this.graph.order,\n            num_relations: this.graph.size,\n            graph_size: this.graph.order + this.graph.size,\n            num_bonded_pairs: this.countBondedPairs(this.graph),\n            rule_applied: ruleApplied,\n        };\n        this.log.push(logEntry);\n    }\n}\n",null,"/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  // NOTE: as per https://github.com/graphology/graphology/issues/149\n  // this function has been loosened not to reject object instances\n  // coming from other JavaScript contexts. It has also been chosen\n  // not to improve it to avoid obvious false positives and avoid\n  // taking a performance hit. People should really use TypeScript\n  // if they want to avoid feeding subtly irrelvant attribute objects.\n  return typeof value === 'object' && value !== null;\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","/**\n * Obliterator Iter Function\n * ==========================\n *\n * Function coercing values to an iterator. It can be quite useful when needing\n * to handle iterables and iterators the same way.\n */\nvar Iterator = require('./iterator.js');\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\nfunction iterOrNull(target) {\n  // Indexed sequence\n  if (\n    typeof target === 'string' ||\n    Array.isArray(target) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))\n  )\n    return Iterator.fromSequence(target);\n\n  // Invalid value\n  if (typeof target !== 'object' || target === null) return null;\n\n  // Iterable\n  if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === 'function')\n    return target[Symbol.iterator]();\n\n  // Iterator duck-typing\n  if (typeof target.next === 'function') return target;\n\n  // Invalid object\n  return null;\n}\n\nmodule.exports = function iter(target) {\n  var iterator = iterOrNull(target);\n\n  if (!iterator)\n    throw new Error(\n      'obliterator: target is not iterable nor a valid iterator.'\n    );\n\n  return iterator;\n};\n","/* eslint no-constant-condition: 0 */\n/**\n * Obliterator Take Function\n * ==========================\n *\n * Function taking n or every value of the given iterator and returns them\n * into an array.\n */\nvar iter = require('./iter.js');\n\n/**\n * Take.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {number}   [n]      - Optional number of items to take.\n * @return {array}\n */\nmodule.exports = function take(iterable, n) {\n  var l = arguments.length > 1 ? n : Infinity,\n    array = l !== Infinity ? new Array(l) : [],\n    step,\n    i = 0;\n\n  var iterator = iter(iterable);\n\n  while (true) {\n    if (i === l) return array;\n\n    step = iterator.next();\n\n    if (step.done) {\n      if (i !== n) array.length = i;\n\n      return array;\n    }\n\n    array[i++] = step.value;\n  }\n};\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n\nEdgeData.prototype.attach = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  // Handling source\n  this.source[outKey][target] = this;\n\n  if (this.undirected && source === target) return;\n\n  // Handling target\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.attachMulti = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Handling source\n  const adj = this.source[outKey];\n  const head = adj[target];\n\n  if (typeof head === 'undefined') {\n    adj[target] = this;\n\n    // Self-loop optimization\n    if (!(this.undirected && source === target)) {\n      // Handling target\n      this.target[inKey][source] = this;\n    }\n\n    return;\n  }\n\n  // Prepending to doubly-linked list\n  head.previous = this;\n  this.next = head;\n\n  // Pointing to new head\n  // NOTE: use mutating swap later to avoid lookup?\n  adj[target] = this;\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.detach = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  delete this.source[outKey][target];\n\n  // No-op delete in case of undirected self-loop\n  delete this.target[inKey][source];\n};\n\nEdgeData.prototype.detachMulti = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Deleting from doubly-linked list\n  if (this.previous === undefined) {\n    // We are dealing with the head\n\n    // Should we delete the adjacency entry because it is now empty?\n    if (this.next === undefined) {\n      delete this.source[outKey][target];\n\n      // No-op delete in case of undirected self-loop\n      delete this.target[inKey][source];\n    } else {\n      // Detaching\n      this.next.previous = undefined;\n\n      // NOTE: could avoid the lookups by creating a #.become mutating method\n      this.source[outKey][target] = this.next;\n\n      // No-op delete in case of undirected self-loop\n      this.target[inKey][source] = this.next;\n    }\n  } else {\n    // We are dealing with another list node\n    this.previous.next = this.next;\n\n    // If not last\n    if (this.next !== undefined) {\n      this.next.previous = this.previous;\n    }\n  }\n};\n","/**\n * Graphology Node Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\nconst NODE = 0;\nconst SOURCE = 1;\nconst TARGET = 2;\nconst OPPOSITE = 3;\n\nfunction findRelevantNodeData(\n  graph,\n  method,\n  mode,\n  nodeOrEdge,\n  nameOrEdge,\n  add1,\n  add2\n) {\n  let nodeData, edgeData, arg1, arg2;\n\n  nodeOrEdge = '' + nodeOrEdge;\n\n  if (mode === NODE) {\n    nodeData = graph._nodes.get(nodeOrEdge);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" node in the graph.`\n      );\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  } else if (mode === OPPOSITE) {\n    nameOrEdge = '' + nameOrEdge;\n\n    edgeData = graph._edges.get(nameOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nameOrEdge}\" edge in the graph.`\n      );\n\n    const source = edgeData.source.key;\n    const target = edgeData.target.key;\n\n    if (nodeOrEdge === source) {\n      nodeData = edgeData.target;\n    } else if (nodeOrEdge === target) {\n      nodeData = edgeData.source;\n    } else {\n      throw new NotFoundGraphError(\n        `Graph.${method}: the \"${nodeOrEdge}\" node is not attached to the \"${nameOrEdge}\" edge (${source}, ${target}).`\n      );\n    }\n\n    arg1 = add1;\n    arg2 = add2;\n  } else {\n    edgeData = graph._edges.get(nodeOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" edge in the graph.`\n      );\n\n    if (mode === SOURCE) {\n      nodeData = edgeData.source;\n    } else {\n      nodeData = edgeData.target;\n    }\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  }\n\n  return [nodeData, arg1, arg2];\n}\n\nfunction attachNodeAttributeGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes[name];\n  };\n}\n\nfunction attachNodeAttributesGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {\n    const [data] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge\n    );\n\n    return data.attributes;\n  };\n}\n\nfunction attachNodeAttributeChecker(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\nfunction attachNodeAttributeSetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, value] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeRemover(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesReplacer(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesMerger(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst NODE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachNodeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachNodeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachNodeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachNodeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachNodeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachNodeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachNodeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachNodeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachNodeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachNodeAttributesMethods(Graph) {\n  NODE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For nodes\n    attacher(Graph, name('Node'), NODE);\n\n    // For sources\n    attacher(Graph, name('Source'), SOURCE);\n\n    // For targets\n    attacher(Graph, name('Target'), TARGET);\n\n    // For opposites\n    attacher(Graph, name('Opposite'), OPPOSITE);\n  });\n}\n","/**\n * Graphology Edge Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject, getMatchingEdge} from '../utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from '../errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesMerger(Class, method, type) {\n  /**\n   * Merge the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesUpdater(Class, method, type) {\n  /**\n   * Update the attributes of the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + updater;\n\n      updater = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst EDGE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachEdgeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachEdgeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachEdgeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachEdgeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachEdgeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachEdgeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachEdgeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachEdgeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachEdgeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachEdgeAttributesMethods(Graph) {\n  EDGE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Obliterator Chain Function\n * ===========================\n *\n * Variadic function combining the given iterables.\n */\nvar Iterator = require('./iterator.js');\nvar iter = require('./iter.js');\n\n/**\n * Chain.\n *\n * @param  {...Iterator} iterables - Target iterables.\n * @return {Iterator}\n */\nmodule.exports = function chain() {\n  var iterables = arguments;\n  var current = null;\n  var i = -1;\n\n  /* eslint-disable no-constant-condition */\n  return new Iterator(function next() {\n    var step = null;\n\n    do {\n      if (current === null) {\n        i++;\n\n        if (i >= iterables.length) return {done: true};\n\n        current = iter(iterables[i]);\n      }\n\n      step = current.next();\n\n      if (step.done === true) {\n        current = null;\n        continue;\n      }\n\n      break;\n    } while (true);\n\n    return step;\n  });\n};\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(breakable, object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction forEachMulti(breakable, object, callback, avoid) {\n  let edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    edgeData = object[k];\n\n    do {\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (breakable && shouldBreak) return edgeData.key;\n\n      edgeData = edgeData.next;\n    } while (edgeData !== undefined);\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let edgeData;\n  let i = 0;\n\n  return new Iterator(function next() {\n    do {\n      if (!edgeData) {\n        if (i >= l) return {done: true};\n\n        const k = keys[i++];\n\n        if (k === avoid) {\n          edgeData = undefined;\n          continue;\n        }\n\n        edgeData = object[k];\n      } else {\n        edgeData = edgeData.next;\n      }\n    } while (!edgeData);\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(breakable, object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    ) &&\n    breakable\n  )\n    return edgeData.key;\n}\n\nfunction forEachForKeyMulti(breakable, object, k, callback) {\n  let edgeData = object[k];\n\n  if (!edgeData) return;\n\n  let shouldBreak = false;\n\n  do {\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n\n    edgeData = edgeData.next;\n  } while (edgeData !== undefined);\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  let edgeData = object[k];\n\n  if (edgeData.next !== undefined) {\n    return new Iterator(function () {\n      if (!edgeData) return {done: true};\n\n      const value = {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      };\n\n      edgeData = edgeData.next;\n\n      return {\n        done: false,\n        value\n      };\n    });\n  }\n\n  return Iterator.of({\n    edge: edgeData.key,\n    attributes: edgeData.attributes,\n    source: edgeData.source.key,\n    target: edgeData.target.key,\n    sourceAttributes: edgeData.source.attributes,\n    targetAttributes: edgeData.target.attributes,\n    undirected: edgeData.undirected\n  });\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(breakable, graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (breakable && shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(\n  breakable,\n  multi,\n  type,\n  direction,\n  nodeData,\n  callback\n) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(breakable, nodeData.in, callback);\n\n      if (breakable && found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(\n        breakable,\n        nodeData.out,\n        callback,\n        !direction ? nodeData.key : undefined\n      );\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(breakable, nodeData.undirected, callback);\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForNode(false, multi, type, direction, nodeData, function (key) {\n    edges.push(key);\n  });\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : undefined)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  breakable,\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(breakable, sourceData.in, target, callback);\n\n      if (breakable && found) return found;\n    }\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      (direction || sourceData.key !== target)\n    ) {\n      found = fn(breakable, sourceData.out, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(breakable, sourceData.undirected, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForPath(\n    false,\n    type,\n    multi,\n    direction,\n    sourceData,\n    target,\n    function (key) {\n      edges.push(key);\n    }\n  );\n\n  return edges;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out &&\n      (direction || sourceData.key !== target)\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(false, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        false,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        false,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(true, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        true,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        true,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Helpers.\n */\nfunction CompositeSetWrapper() {\n  this.A = null;\n  this.B = null;\n}\n\nCompositeSetWrapper.prototype.wrap = function (set) {\n  if (this.A === null) this.A = set;\n  else if (this.B === null) this.B = set;\n};\n\nCompositeSetWrapper.prototype.has = function (key) {\n  if (this.A !== null && key in this.A) return true;\n  if (this.B !== null && key in this.B) return true;\n  return false;\n};\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectOnce(breakable, visited, nodeData, object, callback) {\n  for (const k in object) {\n    const edgeData = object[k];\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited && visited.has(neighborData.key)) continue;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (breakable && shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighbor(breakable, type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.undirected,\n        callback\n      );\n\n    if (typeof direction === 'string')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData[direction],\n        callback\n      );\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.in,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.in);\n    }\n    if (direction !== 'in') {\n      found = forEachInObjectOnce(\n        breakable,\n        visited,\n        nodeData,\n        nodeData.out,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    found = forEachInObjectOnce(\n      breakable,\n      visited,\n      nodeData,\n      nodeData.undirected,\n      callback\n    );\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  const neighbors = [];\n\n  forEachNeighbor(false, type, direction, nodeData, function (key) {\n    neighbors.push(key);\n  });\n\n  return neighbors;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    let neighborData = null;\n\n    do {\n      if (i >= l) {\n        if (visited) visited.wrap(object);\n        return {done: true};\n      }\n\n      const edgeData = object[keys[i++]];\n\n      const sourceData = edgeData.source;\n      const targetData = edgeData.target;\n\n      neighborData = sourceData === nodeData ? targetData : sourceData;\n\n      if (visited && visited.has(neighborData.key)) {\n        neighborData = null;\n        continue;\n      }\n    } while (neighborData === null);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createDedupedObjectIterator(null, nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createDedupedObjectIterator(null, nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighbor(\n      false,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return forEachNeighbor(\n      true,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ===============================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable         - Can we break?\n * @param {boolean}  assymetric        - Whether to emit undirected edges only once.\n * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.\n * @param {Graph}    graph             - Target Graph instance.\n * @param {callback} function          - Iteration callback.\n */\nexport function forEachAdjacency(\n  breakable,\n  assymetric,\n  disconnectedNodes,\n  graph,\n  callback\n) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    let hasEdges = false;\n\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        if (assymetric && sourceData.key > neighbor) continue;\n\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (disconnectedNodes && !hasEdges) {\n      shouldBreak = callback(\n        sourceData.key,\n        null,\n        sourceData.attributes,\n        null,\n        null,\n        null,\n        null\n      );\n\n      if (breakable && shouldBreak) return null;\n    }\n  }\n\n  return;\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used by the graph serialization schemes.\n */\nimport {InvalidArgumentsGraphError} from './errors';\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {string} type - The graph's type.\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(type, key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (type === 'mixed' && data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n    );\n\n  if (!('key' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized node is missing its key.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n    );\n\n  if (!('source' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its source.'\n    );\n\n  if (!('target' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its target.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.'\n    );\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport attachNodeAttributesMethods from './attributes/nodes';\nimport attachEdgeAttributesMethods from './attributes/edges';\nimport attachEdgeIterationMethods from './iteration/edges';\nimport attachNeighborIterationMethods from './iteration/neighbors';\nimport {forEachAdjacency} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source);\n  let targetData = graph._nodes.get(target);\n  let edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are consistent\n      if (edgeData.source.key !== source || edgeData.target.key !== target) {\n        // If source or target inconsistent\n        if (\n          !undirected ||\n          edgeData.source.key !== target ||\n          edgeData.target.key !== source\n        ) {\n          // If directed, or source/target aren't flipped\n          throw new UsageGraphError(\n            `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n          );\n        }\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    const info = [alreadyExistingEdgeData.key, false, false, false];\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return info;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return info;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  let sourceWasAdded = false;\n  let targetWasAdded = false;\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n    sourceWasAdded = true;\n\n    if (source === target) {\n      targetData = sourceData;\n      targetWasAdded = true;\n    }\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n    targetWasAdded = true;\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return [edge, true, sourceWasAdded, targetWasAdded];\n}\n\n/**\n * Internal method used to drop an edge.\n *\n * @param  {Graph}    graph    - Target graph.\n * @param  {EdgeData} edgeData - Data of the edge to drop.\n */\nfunction dropEdgeFromData(graph, edgeData) {\n  // Dropping the edge from the register\n  graph._edges.delete(edgeData.key);\n\n  // Updating related degrees\n  const {source: sourceData, target: targetData, attributes} = edgeData;\n\n  const undirected = edgeData.undirected;\n\n  const isSelfLoop = sourceData === targetData;\n\n  if (undirected) {\n    sourceData.undirectedDegree--;\n    targetData.undirectedDegree--;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops--;\n      graph._undirectedSelfLoopCount--;\n    }\n  } else {\n    sourceData.outDegree--;\n    targetData.inDegree--;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops--;\n      graph._directedSelfLoopCount--;\n    }\n  }\n\n  // Clearing index\n  if (graph.multi) edgeData.detachMulti();\n  else edgeData.detach();\n\n  if (undirected) graph._undirectedSize--;\n  else graph._directedSize--;\n\n  // Emitting\n  graph.emit('edgeDropped', {\n    key: edgeData.key,\n    attributes,\n    source: sourceData.key,\n    target: targetData.key,\n    undirected\n  });\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instancePrefix = 'geid_' + INSTANCE_ID() + '_';\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = instancePrefix + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.out.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.undirected.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return (\n        (typeof nodeData.out !== 'undefined' &&\n          nodeData.out.hasOwnProperty(target)) ||\n        (typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected.hasOwnProperty(target))\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's inbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's outbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree - nodeData.directedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree - nodeData.undirectedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's inbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's outbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n      loops += nodeData.directedLoops * 2;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key;\n    const target = data.target.key;\n\n    if (node === source) return target;\n    if (node === target) return source;\n\n    throw new NotFoundGraphError(\n      `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n    );\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return [node, false];\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return [node, false];\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    let edgeData;\n\n    // Removing attached edges\n    // NOTE: we could be faster here, but this is such a pain to maintain\n    if (this.type !== 'undirected') {\n      for (const neighbor in nodeData.out) {\n        edgeData = nodeData.out[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n\n      for (const neighbor in nodeData.in) {\n        edgeData = nodeData.in[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (this.type !== 'directed') {\n      for (const neighbor in nodeData.undirected) {\n        edgeData = nodeData.undirected[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0];\n      const target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single directed edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropDirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const edgeData = getMatchingEdge(this, source, target, 'directed');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropDirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single undirected edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropUndirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    const edgeData = getMatchingEdge(this, source, target, 'undirected');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropUndirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    // Clearing structure index\n    const iterator = this._nodes.values();\n\n    let step;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      step.value.clear();\n    }\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method updating the graph's attributes.\n   *\n   * @param  {function} updater - Function used to update the attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given updater is not a function.\n   */\n  updateAttributes(updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttributes: provided updater is not a function.'\n      );\n\n    this._attributes = updater(this._attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'update',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData, sourceData, targetData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      sourceData = edgeData.source;\n      targetData = edgeData.target;\n\n      edgeData.attributes = updater(\n        edgeData.key,\n        edgeData.attributes,\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.undirected\n      );\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, false, this, callback);\n  }\n  forEachAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, true, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's assymetric adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAssymetricAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, false, this, callback);\n  }\n  forEachAssymetricAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, true, this, callback);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(this.type, key, data);\n    });\n\n    return {\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      },\n      attributes: this.getAttributes(),\n      nodes,\n      edges\n    };\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance directly\n    if (data instanceof Graph) {\n      // Nodes\n      data.forEachNode((n, a) => {\n        if (merge) this.mergeNode(n, a);\n        else this.addNode(n, a);\n      });\n\n      // Edges\n      data.forEachEdge((e, a, s, t, _sa, _ta, u) => {\n        if (merge) {\n          if (u) this.mergeUndirectedEdgeWithKey(e, s, t, a);\n          else this.mergeDirectedEdgeWithKey(e, s, t, a);\n        } else {\n          if (u) this.addUndirectedEdgeWithKey(e, s, t, a);\n          else this.addDirectedEdgeWithKey(e, s, t, a);\n        }\n      });\n\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list, node, edge;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        node = list[i];\n\n        // Validating\n        validateSerializedNode(node);\n\n        // Adding the node\n        const {key, attributes} = node;\n\n        if (merge) this.mergeNode(key, attributes);\n        else this.addNode(key, attributes);\n      }\n    }\n\n    if (data.edges) {\n      let undirectedByDefault = false;\n\n      if (this.type === 'undirected') {\n        undirectedByDefault = true;\n      }\n\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        edge = list[i];\n\n        // Validating\n        validateSerializedEdge(edge);\n\n        // Adding the edge\n        const {\n          source,\n          target,\n          attributes,\n          undirected = undirectedByDefault\n        } = edge;\n\n        let method;\n\n        if ('key' in edge) {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdgeWithKey\n              : this.mergeDirectedEdgeWithKey\n            : undirected\n            ? this.addUndirectedEdgeWithKey\n            : this.addDirectedEdgeWithKey;\n\n          method.call(this, edge.key, source, target, attributes);\n        } else {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdge\n              : this.mergeDirectedEdge\n            : undirected\n            ? this.addUndirectedEdge\n            : this.addDirectedEdge;\n\n          method.call(this, source, target, attributes);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    const graph = new Graph(assign({}, this._options, options));\n    graph.replaceAttributes(assign({}, this.getAttributes()));\n    return graph;\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @param  {object} options - Upgrade options.\n   * @return {Graph}          - The copy.\n   */\n  copy(options) {\n    options = options || {};\n\n    if (\n      typeof options.type === 'string' &&\n      options.type !== this.type &&\n      options.type !== 'mixed'\n    )\n      throw new UsageGraphError(\n        `Graph.copy: cannot create an incompatible copy from \"${this.type}\" type to \"${options.type}\" because this would mean losing information about the current graph.`\n      );\n\n    if (\n      typeof options.multi === 'boolean' &&\n      options.multi !== this.multi &&\n      options.multi !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.'\n      );\n\n    if (\n      typeof options.allowSelfLoops === 'boolean' &&\n      options.allowSelfLoops !== this.allowSelfLoops &&\n      options.allowSelfLoops !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.'\n      );\n\n    const graph = this.emptyCopy(options);\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      addEdge(\n        graph,\n        'copy',\n        false,\n        edgeData.undirected,\n        edgeData.key,\n        edgeData.source.key,\n        edgeData.target.key,\n        assign({}, edgeData.attributes)\n      );\n    }\n\n    return graph;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function' &&\n        typeof k !== 'symbol'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Attributes-related.\n */\nattachNodeAttributesMethods(Graph);\nattachEdgeAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n","/**\n * Graphology Utils\n * =================\n *\n * Library endpoint.\n */\nexports.inferMulti = require('./infer-multi.js');\nexports.inferType = require('./infer-type.js');\nexports.isGraph = require('./is-graph.js');\nexports.isGraphConstructor = require('./is-graph-constructor.js');\nexports.mergeClique = require('./merge-clique.js');\nexports.mergeCycle = require('./merge-cycle.js');\nexports.mergePath = require('./merge-path.js');\nexports.mergeStar = require('./merge-star.js');\nexports.renameGraphKeys = require('./rename-graph-keys.js');\nexports.updateGraphKeys = require('./update-graph-keys.js');\n","/**\n * Graphology inferMulti\n * ======================\n *\n * Useful function used to \"guess\" if the given graph is truly multi.\n */\nvar isGraph = require('./is-graph.js');\n\n/**\n * Returning whether the given graph is inferred as multi.\n *\n * @param  {Graph}   graph - Target graph.\n * @return {boolean}\n */\nmodule.exports = function inferMulti(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-utils/infer-multi: expecting a valid graphology instance.'\n    );\n\n  if (!graph.multi || graph.order === 0 || graph.size < 2) return false;\n\n  var multi = false;\n\n  // TODO: improve this with suitable methods\n  var previousSource, previousTarget, wasUndirected, tmp;\n\n  graph.forEachAssymetricAdjacencyEntry(function (s, t, sa, ta, e, ea, u) {\n    if (multi) return; // TODO: we need #.someAdjacencyEntry\n\n    if (u && s > t) {\n      tmp = t;\n      t = s;\n      s = tmp;\n    }\n\n    if (s === previousSource && t === previousTarget && u === wasUndirected) {\n      multi = true;\n      return;\n    }\n\n    previousSource = s;\n    previousTarget = t;\n    wasUndirected = u;\n  });\n\n  return multi;\n};\n","/**\n * Graphology isGraph\n * ===================\n *\n * Very simple function aiming at ensuring the given variable is a\n * graphology instance.\n */\n\n/**\n * Checking the value is a graphology instance.\n *\n * @param  {any}     value - Target value.\n * @return {boolean}\n */\nmodule.exports = function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function' &&\n    typeof value.multi === 'boolean'\n  );\n};\n","/**\n * Graphology inferType\n * =====================\n *\n * Useful function used to \"guess\" the real type of the given Graph using\n * introspection.\n */\nvar isGraph = require('./is-graph.js');\n\n/**\n * Returning the inferred type of the given graph.\n *\n * @param  {Graph}   graph - Target graph.\n * @return {boolean}\n */\nmodule.exports = function inferType(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-utils/infer-type: expecting a valid graphology instance.'\n    );\n\n  var declaredType = graph.type;\n\n  if (declaredType !== 'mixed') return declaredType;\n\n  if (\n    (graph.directedSize === 0 && graph.undirectedSize === 0) ||\n    (graph.directedSize > 0 && graph.undirectedSize > 0)\n  )\n    return 'mixed';\n\n  if (graph.directedSize > 0) return 'directed';\n\n  return 'undirected';\n};\n","/**\n * Graphology isGraphConstructor\n * ==============================\n *\n * Very simple function aiming at ensuring the given variable is a\n * graphology constructor.\n */\n\n/**\n * Checking the value is a graphology constructor.\n *\n * @param  {any}     value - Target value.\n * @return {boolean}\n */\nmodule.exports = function isGraphConstructor(value) {\n  return (\n    value !== null &&\n    typeof value === 'function' &&\n    typeof value.prototype === 'object' &&\n    typeof value.prototype.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.prototype.dropNode === 'function'\n  );\n};\n","/**\n * Graphology mergeClique\n * =======================\n *\n * Function merging the given clique to the graph.\n */\n\n/**\n * Merging the given clique to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes representing the clique to merge.\n */\nmodule.exports = function mergeClique(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var source, target, i, j, l;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    source = nodes[i];\n\n    for (j = i + 1; j < l; j++) {\n      target = nodes[j];\n\n      graph.mergeEdge(source, target);\n    }\n  }\n};\n","/**\n * Graphology mergeCycle\n * =====================\n *\n * Function merging the given cycle to the graph.\n */\n\n/**\n * Merging the given cycle to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes representing the cycle to merge.\n */\nmodule.exports = function mergeCycle(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var previousNode, node, i, l;\n\n  graph.mergeNode(nodes[0]);\n\n  if (nodes.length === 1) return;\n\n  for (i = 1, l = nodes.length; i < l; i++) {\n    previousNode = nodes[i - 1];\n    node = nodes[i];\n\n    graph.mergeEdge(previousNode, node);\n  }\n\n  graph.mergeEdge(node, nodes[0]);\n};\n","/**\n * Graphology mergePath\n * =====================\n *\n * Function merging the given path to the graph.\n */\n\n/**\n * Merging the given path to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes representing the path to merge.\n */\nmodule.exports = function mergePath(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var previousNode, node, i, l;\n\n  graph.mergeNode(nodes[0]);\n\n  for (i = 1, l = nodes.length; i < l; i++) {\n    previousNode = nodes[i - 1];\n    node = nodes[i];\n\n    graph.mergeEdge(previousNode, node);\n  }\n};\n","/**\n * Graphology mergeStar\n * =====================\n *\n * Function merging the given star to the graph.\n */\n\n/**\n * Merging the given star to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes to add, first one being the center of the star.\n */\nmodule.exports = function mergeStar(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var node, i, l;\n\n  var center = nodes[0];\n\n  graph.mergeNode(center);\n\n  for (i = 1, l = nodes.length; i < l; i++) {\n    node = nodes[i];\n\n    graph.mergeEdge(center, node);\n  }\n};\n","/**\n * Graphology Rename Graph Keys\n * =============================\n *\n * Helpers allowing you to rename (ie. change the key) of nodes & edges .\n */\nvar copyEdge = require('./add-edge.js').copyEdge;\n\nmodule.exports = function renameGraphKeys(\n  graph,\n  nodeKeyMapping,\n  edgeKeyMapping\n) {\n  if (typeof nodeKeyMapping === 'undefined') nodeKeyMapping = {};\n  if (typeof edgeKeyMapping === 'undefined') edgeKeyMapping = {};\n\n  var renamed = graph.nullCopy();\n\n  // Renaming nodes\n  graph.forEachNode(function (key, attr) {\n    var renamedKey = nodeKeyMapping[key];\n\n    if (typeof renamedKey === 'undefined') renamedKey = key;\n\n    renamed.addNode(renamedKey, attr);\n  });\n\n  // Renaming edges\n  var currentSource, currentSourceRenamed;\n\n  graph.forEachAssymetricAdjacencyEntry(function (\n    source,\n    target,\n    _sa,\n    _ta,\n    key,\n    attr,\n    undirected\n  ) {\n    // Leveraging the ordered adjacency to save lookups\n    if (source !== currentSource) {\n      currentSource = source;\n      currentSourceRenamed = nodeKeyMapping[source];\n\n      if (typeof currentSourceRenamed === 'undefined')\n        currentSourceRenamed = source;\n    }\n\n    var targetRenamed = nodeKeyMapping[target];\n\n    if (typeof targetRenamed === 'undefined') targetRenamed = target;\n\n    var renamedKey = edgeKeyMapping[key];\n\n    if (typeof renamedKey === 'undefined') renamedKey = key;\n\n    copyEdge(\n      renamed,\n      undirected,\n      renamedKey,\n      currentSourceRenamed,\n      targetRenamed,\n      attr\n    );\n  });\n\n  return renamed;\n};\n","/**\n * Graphology Edge Adders\n * =======================\n *\n * Generic edge addition functions that can be used to avoid nasty repetitive\n * conditions.\n */\nexports.addEdge = function addEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  attributes\n) {\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.addUndirectedEdge(source, target, attributes);\n    else return graph.addUndirectedEdgeWithKey(key, source, target, attributes);\n  } else {\n    if (key === null || key === undefined)\n      return graph.addDirectedEdge(source, target, attributes);\n    else return graph.addDirectedEdgeWithKey(key, source, target, attributes);\n  }\n};\n\nexports.copyEdge = function copyEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  attributes\n) {\n  attributes = Object.assign({}, attributes);\n\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.addUndirectedEdge(source, target, attributes);\n    else return graph.addUndirectedEdgeWithKey(key, source, target, attributes);\n  } else {\n    if (key === null || key === undefined)\n      return graph.addDirectedEdge(source, target, attributes);\n    else return graph.addDirectedEdgeWithKey(key, source, target, attributes);\n  }\n};\n\nexports.mergeEdge = function mergeEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  attributes\n) {\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.mergeUndirectedEdge(source, target, attributes);\n    else\n      return graph.mergeUndirectedEdgeWithKey(key, source, target, attributes);\n  } else {\n    if (key === null || key === undefined)\n      return graph.mergeDirectedEdge(source, target, attributes);\n    else return graph.mergeDirectedEdgeWithKey(key, source, target, attributes);\n  }\n};\n\nexports.updateEdge = function updateEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  updater\n) {\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.updateUndirectedEdge(source, target, updater);\n    else return graph.updateUndirectedEdgeWithKey(key, source, target, updater);\n  } else {\n    if (key === null || key === undefined)\n      return graph.updateDirectedEdge(source, target, updater);\n    else return graph.updateDirectedEdgeWithKey(key, source, target, updater);\n  }\n};\n","/**\n * Graphology Update Graph Keys\n * =============================\n *\n * Helpers allowing you to update keys of nodes & edges .\n */\nvar copyEdge = require('./add-edge.js').copyEdge;\n\nmodule.exports = function updateGraphKeys(\n  graph,\n  nodeKeyUpdater,\n  edgeKeyUpdater\n) {\n  var renamed = graph.nullCopy();\n\n  // Renaming nodes\n  graph.forEachNode(function (key, attr) {\n    var renamedKey = nodeKeyUpdater ? nodeKeyUpdater(key, attr) : key;\n    renamed.addNode(renamedKey, attr);\n  });\n\n  // Renaming edges\n  var currentSource, currentSourceRenamed;\n\n  graph.forEachAssymetricAdjacencyEntry(function (\n    source,\n    target,\n    sourceAttr,\n    targetAttr,\n    key,\n    attr,\n    undirected\n  ) {\n    // Leveraging the ordered adjacency to save calls\n    if (source !== currentSource) {\n      currentSource = source;\n      currentSourceRenamed = nodeKeyUpdater\n        ? nodeKeyUpdater(source, sourceAttr)\n        : source;\n    }\n\n    var targetRenamed = nodeKeyUpdater\n      ? nodeKeyUpdater(target, targetAttr)\n      : target;\n\n    var renamedKey = edgeKeyUpdater\n      ? edgeKeyUpdater(\n          key,\n          attr,\n          source,\n          target,\n          sourceAttr,\n          targetAttr,\n          undirected\n        )\n      : key;\n\n    copyEdge(\n      renamed,\n      undirected,\n      renamedKey,\n      currentSourceRenamed,\n      targetRenamed,\n      attr\n    );\n  });\n\n  return renamed;\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","/* @license\nPapa Parse\nv5.5.3\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n((e,t)=>{\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()})(this,function r(){var n=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==n?n:{};var d,s=!n.document&&!!n.postMessage,a=n.IS_PAPA_WORKER||!1,o={},h=0,v={};function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=b(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(t,e){var i=parseInt(this._config.skipFirstNLines)||0;if(this.isFirstChunk&&0<i){let e=this._config.newline;e||(r=this._config.quoteChar||'\"',e=this._handle.guessLineEndings(t,r)),t=[...t.split(e).slice(i)].join(e)}this.isFirstChunk&&U(this._config.beforeFirstChunk)&&void 0!==(r=this._config.beforeFirstChunk(t))&&(t=r),this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+t,r=(this._partialLine=\"\",this._handle.parse(i,this._baseIndex,!this._finished));if(!this._handle.paused()&&!this._handle.aborted()){t=r.meta.cursor,i=(this._finished||(this._partialLine=i.substring(t-this._baseIndex),this._baseIndex=t),r&&r.data&&(this._rowCount+=r.data.length),this._finished||this._config.preview&&this._rowCount>=this._config.preview);if(a)n.postMessage({results:r,workerId:v.WORKER_ID,finished:i});else if(U(this._config.chunk)&&!e){if(this._config.chunk(r,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);this._completeResults=r=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(r.data),this._completeResults.errors=this._completeResults.errors.concat(r.errors),this._completeResults.meta=r.meta),this._completed||!i||!U(this._config.complete)||r&&r.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),i||r&&r.meta.paused||this._nextChunk(),r}this._halted=!0},this._sendError=function(e){U(this._config.error)?this._config.error(e):a&&this._config.error&&n.postMessage({workerId:v.WORKER_ID,error:e,finished:!1})}}function f(e){var r;(e=e||{}).chunkSize||(e.chunkSize=v.RemoteChunkSize),u.call(this,e),this._nextChunk=s?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),s||(r.onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!s),this._config.downloadRequestHeaders){var e,t=this._config.downloadRequestHeaders;for(e in t)r.setRequestHeader(e,t[e])}var i;this._config.chunkSize&&(i=this._start+this._config.chunkSize-1,r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i));try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}s&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize||r.responseText.length,this._finished=!this._config.chunkSize||this._start>=(e=>null!==(e=e.getResponseHeader(\"Content-Range\"))?parseInt(e.substring(e.lastIndexOf(\"/\")+1)):-1)(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){e=r.statusText||e;this._sendError(new Error(e))}}function l(e){(e=e||{}).chunkSize||(e.chunkSize=v.LocalChunkSize),u.call(this,e);var i,r,n=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,r=e.slice||e.webkitSlice||e.mozSlice,n?((i=new FileReader).onload=y(this._chunkLoaded,this),i.onerror=y(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input,t=(this._config.chunkSize&&(t=Math.min(this._start+this._config.chunkSize,this._input.size),e=r.call(e,this._start,t)),i.readAsText(e,this._config.encoding));n||this._chunkLoaded({target:{result:t}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function c(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){var e,t;if(!this._finished)return e=this._config.chunkSize,i=e?(t=i.substring(0,e),i.substring(e)):(t=i,\"\"),this._finished=!i,this.parseChunk(t)}}function p(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=y(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=y(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=y(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=y(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var n,s,a,t,o=Math.pow(2,53),h=-o,u=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,d=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,i=this,r=0,f=0,l=!1,e=!1,c=[],p={data:[],errors:[],meta:{}};function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){if(p&&a&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+v.DefaultDelimiter+\"'\"),a=!1),m.skipEmptyLines&&(p.data=p.data.filter(function(e){return!y(e)})),_()){if(p)if(Array.isArray(p.data[0])){for(var e=0;_()&&e<p.data.length;e++)p.data[e].forEach(t);p.data.splice(0,1)}else p.data.forEach(t);function t(e,t){U(m.transformHeader)&&(e=m.transformHeader(e,t)),c.push(e)}}function i(e,t){for(var i=m.header?{}:[],r=0;r<e.length;r++){var n=r,s=e[r],s=((e,t)=>(e=>(m.dynamicTypingFunction&&void 0===m.dynamicTyping[e]&&(m.dynamicTyping[e]=m.dynamicTypingFunction(e)),!0===(m.dynamicTyping[e]||m.dynamicTyping)))(e)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&((e=>{if(u.test(e)){e=parseFloat(e);if(h<e&&e<o)return 1}})(t)?parseFloat(t):d.test(t)?new Date(t):\"\"===t?null:t):t)(n=m.header?r>=c.length?\"__parsed_extra\":c[r]:n,s=m.transform?m.transform(s,n):s);\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>c.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+c.length+\" fields but parsed \"+r,f+t):r<c.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+c.length+\" fields but parsed \"+r,f+t)),i}var r;p&&(m.header||m.dynamicTyping||m.transform)&&(r=1,!p.data.length||Array.isArray(p.data[0])?(p.data=p.data.map(i),r=p.data.length):p.data=i(p.data,0),m.header&&p.meta&&(p.meta.fields=c),f+=r)}function _(){return m.header&&0===c.length}function k(e,t,i,r){e={type:e,code:t,message:i};void 0!==r&&(e.row=r),p.errors.push(e)}U(m.step)&&(t=m.step,m.step=function(e){p=e,_()?g():(g(),0!==p.data.length&&(r+=e.data.length,m.preview&&r>m.preview?s.abort():(p.data=p.data[0],t(p,i))))}),this.parse=function(e,t,i){var r=m.quoteChar||'\"',r=(m.newline||(m.newline=this.guessLineEndings(e,r)),a=!1,m.delimiter?U(m.delimiter)&&(m.delimiter=m.delimiter(e),p.meta.delimiter=m.delimiter):((r=((e,t,i,r,n)=>{var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",v.RECORD_SEP,v.UNIT_SEP];for(var u=0;u<n.length;u++){for(var d,f=n[u],l=0,c=0,p=0,g=(o=void 0,new E({comments:r,delimiter:f,newline:t,preview:10}).parse(e)),_=0;_<g.data.length;_++)i&&y(g.data[_])?p++:(d=g.data[_].length,c+=d,void 0===o?o=d:0<d&&(l+=Math.abs(d-o),o=d));0<g.data.length&&(c/=g.data.length-p),(void 0===a||l<=a)&&(void 0===h||h<c)&&1.99<c&&(a=l,s=f,h=c)}return{successful:!!(m.delimiter=s),bestDelimiter:s}})(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess)).successful?m.delimiter=r.bestDelimiter:(a=!0,m.delimiter=v.DefaultDelimiter),p.meta.delimiter=m.delimiter),b(m));return m.preview&&m.header&&r.preview++,n=e,s=new E(r),p=s.parse(n,t,i),g(),l?{meta:{paused:!0}}:p||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,s.abort(),n=U(m.chunk)?\"\":n.substring(s.getCharIndex())},this.resume=function(){i.streamer._halted?(l=!1,i.streamer.parseChunk(n,!0)):setTimeout(i.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,s.abort(),p.meta.aborted=!0,U(m.complete)&&m.complete(p),n=\"\"},this.guessLineEndings=function(e,t){e=e.substring(0,1048576);var t=new RegExp(P(t)+\"([^]*?)\"+P(t),\"gm\"),i=(e=e.replace(t,\"\")).split(\"\\r\"),t=e.split(\"\\n\"),e=1<t.length&&t[0].length<i[0].length;if(1===i.length||e)return\"\\n\";for(var r=0,n=0;n<i.length;n++)\"\\n\"===i[n][0]&&r++;return r>=i.length/2?\"\\r\\n\":\"\\r\"}}function P(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(C){var S=(C=C||{}).delimiter,O=C.newline,x=C.comments,I=C.step,A=C.preview,T=C.fastMode,D=null,L=!1,F=null==C.quoteChar?'\"':C.quoteChar,j=F;if(void 0!==C.escapeChar&&(j=C.escapeChar),(\"string\"!=typeof S||-1<v.BAD_DELIMITERS.indexOf(S))&&(S=\",\"),x===S)throw new Error(\"Comment character same as delimiter\");!0===x?x=\"#\":(\"string\"!=typeof x||-1<v.BAD_DELIMITERS.indexOf(x))&&(x=!1),\"\\n\"!==O&&\"\\r\"!==O&&\"\\r\\n\"!==O&&(O=\"\\n\");var z=0,M=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=S.length,s=O.length,a=x.length,o=U(I),h=[],u=[],d=[],f=z=0;if(!i)return w();if(T||!1!==T&&-1===i.indexOf(F)){for(var l=i.split(O),c=0;c<l.length;c++){if(d=l[c],z+=d.length,c!==l.length-1)z+=O.length;else if(r)return w();if(!x||d.substring(0,a)!==x){if(o){if(h=[],k(d.split(S)),R(),M)return w()}else k(d.split(S));if(A&&A<=c)return h=h.slice(0,A),w(!0)}}return w()}for(var p=i.indexOf(S,z),g=i.indexOf(O,z),_=new RegExp(P(j)+P(F),\"g\"),m=i.indexOf(F,z);;)if(i[z]===F)for(m=z,z++;;){if(-1===(m=i.indexOf(F,m+1)))return r||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:z}),E();if(m===n-1)return E(i.substring(z,m).replace(_,F));if(F===j&&i[m+1]===j)m++;else if(F===j||0===m||i[m-1]!==j){-1!==p&&p<m+1&&(p=i.indexOf(S,m+1));var y=v(-1===(g=-1!==g&&g<m+1?i.indexOf(O,m+1):g)?p:Math.min(p,g));if(i.substr(m+1+y,e)===S){d.push(i.substring(z,m).replace(_,F)),i[z=m+1+y+e]!==F&&(m=i.indexOf(F,z)),p=i.indexOf(S,z),g=i.indexOf(O,z);break}y=v(g);if(i.substring(m+1+y,m+1+y+s)===O){if(d.push(i.substring(z,m).replace(_,F)),b(m+1+y+s),p=i.indexOf(S,z),m=i.indexOf(F,z),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:z}),m++}}else if(x&&0===d.length&&i.substring(z,z+a)===x){if(-1===g)return w();z=g+s,g=i.indexOf(O,z),p=i.indexOf(S,z)}else if(-1!==p&&(p<g||-1===g))d.push(i.substring(z,p)),z=p+e,p=i.indexOf(S,z);else{if(-1===g)break;if(d.push(i.substring(z,g)),b(g+s),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0)}return E();function k(e){h.push(e),f=z}function v(e){var t=0;return t=-1!==e&&(e=i.substring(m+1,e))&&\"\"===e.trim()?e.length:t}function E(e){return r||(void 0===e&&(e=i.substring(z)),d.push(e),z=n,k(d),o&&R()),w()}function b(e){z=e,k(d),d=[],g=i.indexOf(O,z)}function w(e){if(C.header&&!t&&h.length&&!L){var s=h[0],a=Object.create(null),o=new Set(s);let n=!1;for(let r=0;r<s.length;r++){let i=s[r];if(a[i=U(C.transformHeader)?C.transformHeader(i,r):i]){let e,t=a[i];for(;e=i+\"_\"+t,t++,o.has(e););o.add(e),s[r]=e,a[i]++,n=!0,(D=null===D?{}:D)[e]=i}else a[i]=1,s[r]=i;o.add(i)}n&&console.warn(\"Duplicate headers found and renamed.\"),L=!0}return{data:h,errors:u,meta:{delimiter:S,linebreak:O,aborted:M,truncated:!!e,cursor:f+(t||0),renamedHeaders:D}}}function R(){I(w()),h=[],u=[]}},this.abort=function(){M=!0},this.getCharIndex=function(){return z}}function g(e){var t=e.data,i=o[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,_(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:m,resume:m};if(U(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else U(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&_(t.workerId,t.results)}function _(e,t){var i=o[e];U(i.userComplete)&&i.userComplete(t),i.terminate(),delete o[e]}function m(){throw new Error(\"Not implemented.\")}function b(e){if(\"object\"!=typeof e||null===e)return e;var t,i=Array.isArray(e)?[]:{};for(t in e)i[t]=b(e[t]);return i}function y(e,t){return function(){e.apply(t,arguments)}}function U(e){return\"function\"==typeof e}return v.parse=function(e,t){var i=(t=t||{}).dynamicTyping||!1;U(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!U(t.transform)&&t.transform,!t.worker||!v.WORKERS_SUPPORTED)return i=null,v.NODE_STREAM_INPUT,\"string\"==typeof e?(e=(e=>65279!==e.charCodeAt(0)?e:e.slice(1))(e),i=new(t.download?f:c)(t)):!0===e.readable&&U(e.read)&&U(e.on)?i=new p(t):(n.File&&e instanceof File||e instanceof Object)&&(i=new l(t)),i.stream(e);(i=(()=>{var e;return!!v.WORKERS_SUPPORTED&&(e=(()=>{var e=n.URL||n.webkitURL||null,t=r.toString();return v.BLOB_URL||(v.BLOB_URL=e.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",t,\")();\"],{type:\"text/javascript\"})))})(),(e=new n.Worker(e)).onmessage=g,e.id=h++,o[e.id]=e)})()).userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=U(t.step),t.chunk=U(t.chunk),t.complete=U(t.complete),t.error=U(t.error),delete t.worker,i.postMessage({input:e,config:t,workerId:i.id})},v.unparse=function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null,o=!1,h=((()=>{if(\"object\"==typeof t){if(\"string\"!=typeof t.delimiter||v.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter),\"boolean\"!=typeof t.quotes&&\"function\"!=typeof t.quotes&&!Array.isArray(t.quotes)||(n=t.quotes),\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines),\"string\"==typeof t.newline&&(y=t.newline),\"string\"==typeof t.quoteChar&&(s=t.quoteChar),\"boolean\"==typeof t.header&&(_=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s),t.escapeFormulae instanceof RegExp?o=t.escapeFormulae:\"boolean\"==typeof t.escapeFormulae&&t.escapeFormulae&&(o=/^[=+\\-@\\t\\r].*$/)}})(),new RegExp(P(s),\"g\"));\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||Object.keys(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||r),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function u(e,t,i){var r=\"\",n=(\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t)),Array.isArray(e)&&0<e.length),s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=k(e[a],a);0<t.length&&(r+=y)}for(var o=0;o<t.length;o++){var h=(n?e:t[o]).length,u=!1,d=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===i&&n){for(var f=[],l=0;l<h;l++){var c=s?e[l]:l;f.push(t[o][c])}u=\"\"===f.join(\"\").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!d&&(r+=m);var g=n&&s?e[p]:p;r+=k(t[o][g],p)}o<t.length-1&&(!i||0<h&&!d)&&(r+=y)}}return r}function k(e,t){var i,r;return null==e?\"\":e.constructor===Date?JSON.stringify(e).slice(1,25):(r=!1,o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0),i=e.toString().replace(h,a),(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||((e,t)=>{for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1})(i,v.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i)}},v.RECORD_SEP=String.fromCharCode(30),v.UNIT_SEP=String.fromCharCode(31),v.BYTE_ORDER_MARK=\"\\ufeff\",v.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',v.BYTE_ORDER_MARK],v.WORKERS_SUPPORTED=!s&&!!n.Worker,v.NODE_STREAM_INPUT=1,v.LocalChunkSize=10485760,v.RemoteChunkSize=5242880,v.DefaultDelimiter=\",\",v.Parser=E,v.ParserHandle=i,v.NetworkStreamer=f,v.FileStreamer=l,v.StringStreamer=c,v.ReadableStreamStreamer=p,n.jQuery&&((d=n.jQuery).fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&n.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0===h.length)U(o.complete)&&o.complete();else{var e,t,i,r,n=h[0];if(U(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(U(o.error)&&o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){U(a)&&a(e,n.file,n.inputElem),u()},v.parse(n.file,n.instanceConfig)}}function u(){h.splice(0,1),e()}}),a&&(n.onmessage=function(e){e=e.data;void 0===v.WORKER_ID&&e&&(v.WORKER_ID=e.workerId);\"string\"==typeof e.input?n.postMessage({workerId:v.WORKER_ID,results:v.parse(e.input,e.config),finished:!0}):(n.File&&e.input instanceof File||e.input instanceof Object)&&(e=v.parse(e.input,e.config))&&n.postMessage({workerId:v.WORKER_ID,results:e,finished:!0})}),(f.prototype=Object.create(u.prototype)).constructor=f,(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(c.prototype)).constructor=c,(p.prototype=Object.create(u.prototype)).constructor=p,v});"],"names":["assign","target","arguments","i","l","length","k","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isPlainObject","value","_typeof","isEmpty","o","privateProperty","name","Object","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","ReflectOwnKeys","R","Reflect","ReflectApply","apply","receiver","args","Function","prototype","call","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","EventEmitter","init","this","eventsModule","exports","events","once","emitter","Promise","resolve","reject","errorListener","err","removeListener","resolver","slice","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","existing","warning","create","newListener","emit","unshift","push","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","Iterator","next","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","Symbol","iterator","Iterator$2","of","done","empty","fromSequence","sequence","is","support","ARRAY_BUFFER_SUPPORT","ArrayBuffer","SYMBOL_SUPPORT","require$$0","require$$1","iter","isView","iterOrNull","take","iterable","step","Infinity","array","GraphError","_Error","_this","_inheritsLoose","_wrapNativeSuper","InvalidArgumentsGraphError","_GraphError","_this2","captureStackTrace","constructor","NotFoundGraphError","_GraphError2","_this3","UsageGraphError","_GraphError3","_this4","MixedNodeData","clear","DirectedNodeData","UndirectedNodeData","EdgeData","inDegree","outDegree","undirectedDegree","undirectedLoops","directedLoops","attach","outKey","inKey","attachMulti","adj","head","previous","detach","detachMulti","findRelevantNodeData","method","mode","nodeOrEdge","nameOrEdge","add1","add2","nodeData","edgeData","arg1","arg2","_edges","NODE_ATTRIBUTES_METHODS","element","attacher","Class","_findRelevantNodeData","data","_findRelevantNodeData3","hasOwnProperty","_findRelevantNodeData4","_findRelevantNodeData5","updater","_findRelevantNodeData6","_findRelevantNodeData7","_findRelevantNodeData8","_findRelevantNodeData9","EDGE_ATTRIBUTES_METHODS","multi","chain","iterables","current","EDGES_ITERATION","direction","forEachSimple","breakable","object","callback","avoid","shouldBreak","forEachMulti","createIterator","sourceAttributes","targetAttributes","forEachForKeySimple","targetData","forEachForKeyMulti","createIteratorForKey","createEdgeArray","size","from","undirectedSize","directedSize","mask","values","forEachEdge","shouldFilter","_data","createEdgeIterator","forEachEdgeForNode","found","fn","createEdgeArrayForNode","edges","createEdgeIteratorForNode","forEachEdgeForPath","createEdgeArrayForPath","createEdgeIteratorForPath","NEIGHBORS_ITERATION","CompositeSetWrapper","A","B","forEachInObjectOnce","visited","neighborData","has","forEachNeighbor","wrap","createDedupedObjectIterator","neighbor","attachNeighborArrayCreator","description","node","neighbors","createNeighborArrayForNode","attachNeighborIteratorCreator","iteratorName","createNeighborIterator","forEachAdjacency","assymetric","disconnectedNodes","hasEdges","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","Math","floor","random","TYPES","Set","EMITTER_PROPS","DEFAULTS","allowSelfLoops","unsafeAddNode","NodeDataClass","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","isSelfLoop","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","info","oldAttributes","sourceWasAdded","targetWasAdded","dropEdgeFromData","Graph","_EventEmitter","options","_assertThisInitialized","instancePrefix","edgeId","Map","availableEdgeKey","forEach","prop","_options","_proto","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","inboundDegree","degree","outboundDegree","inDegreeWithoutSelfLoops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","inboundDegreeWithoutSelfLoops","loops","outboundDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","addNode","mergeNode","updateNode","dropNode","dropEdge","dropDirectedEdge","dropUndirectedEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","updateAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachAdjacencyEntry","forEachAdjacencyEntryWithOrphans","forEachAssymetricAdjacencyEntry","forEachAssymetricAdjacencyEntryWithOrphans","nodes","forEachNode","findNode","mapNodes","result","order","someNode","everyNode","filterNodes","reduceNodes","initialValue","accumulator","nodeEntries","serialized","serializeNode","serializeEdge","merge","a","e","s","t","_sa","_ta","u","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addUndirectedEdgeWithKey","addDirectedEdgeWithKey","_node","undirectedByDefault","_edge","_edge$undirected","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","toJSON","toString","inspect","multiIndex","tmp","label","desc","startsWith","dummy","verb","generateKey","_ref","attachNodeAttributesMethods","attachEdgeAttributesMethods","attachEdgeArrayCreator","forEachName","toUpperCase","mapName","ea","sa","ta","filterName","reduceName","attachForEachEdge","findEdgeName","someName","everyName","attachFindEdge","originalName","attachEdgeIteratorCreator","attachEdgeIterationMethods","attachForEachNeighbor","capitalizedSingular","findName","attachFindNeighbor","attachNeighborIterationMethods","DirectedGraph","_Graph","finalOptions","UndirectedGraph","_Graph2","MultiGraph","_Graph3","MultiDirectedGraph","_Graph4","MultiUndirectedGraph","_Graph5","attachStaticFromMethod","instance"],"version":3,"file":"mvu1-sim.8ed14f75.js.map","sourceRoot":"/__parcel_source_root/"}